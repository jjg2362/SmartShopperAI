import React, { useEffect, useState } from 'react';
import { useLocation, useNavigate } from 'react-router-dom';

import * as Styled from './styles';

const HeaderMenuList = [
  {
    id: 0,
    name: 'AI상품추천',
    path: '/'
  },
  {
    id: 1,
    name: '베스트셀러',
    path: '/about'
  },
  {
    id: 2,
    name: '이달의 특가',
    path: '/aaa'
  },
  {
    id: 3,
    name: '장바구니',
    path: '/cart'
  }
];

const Header = () => {
  const { pathname } = useLocation();
  const navagate = useNavigate();
  const [isToggleHam, setIsToggleHam] = useState(false);
  const [currentPath, setCurrentPath] = useState('');
  const [isSticky, setIsSticky] = useState(false);

  const handleScroll = () => {
    if (window.scrollY > 60) {
      setIsSticky(true);
    } else {
      setIsSticky(false);
    }
  };

  useEffect(() => {
    window.addEventListener('scroll', handleScroll);
  }, []);

  useEffect(() => {
    if (pathname.includes('about')) {
      setCurrentPath('about');
    } else if (pathname.includes('contact')) {
      setCurrentPath('contact');
    } else {
      setCurrentPath('');
    }
  }, [pathname]);

  const onClickHeaderMenu = (path) => {
    if (path.includes('https')) {
      window.open(path, '_blank');
    } else {
      navagate(path);
    }
  };

  return (
    <Styled.Container>
      <Styled.HeaderBackground />

      <Styled.HeaderWrapper>
        <Styled.Logo onClick={() => navagate('/')}>
          <svg
            width="134"
            height="29"
            viewBox="0 0 134 29"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
          >
            {/* <path
              d="M37.98 21C37.8333 21 37.7133 20.9533 37.62 20.86C37.5267 20.7667 37.48 20.6467 37.48 20.5V7.5C37.48 7.35333 37.5267 7.23333 37.62 7.14C37.7133 7.04667 37.8333 7 37.98 7H40.2C40.3467 7 40.4667 7.04667 40.56 7.14C40.6533 7.23333 40.7 7.35333 40.7 7.5V18.32H46.9C47.0467 18.32 47.1667 18.3667 47.26 18.46C47.3533 18.5533 47.4 18.6733 47.4 18.82V20.5C47.4 20.6467 47.3533 20.7667 47.26 20.86C47.1667 20.9533 47.0467 21 46.9 21H37.98ZM54.6844 21.2C53.511 21.2 52.4844 21.0067 51.6044 20.62C50.7244 20.22 50.0444 19.6133 49.5644 18.8C49.0844 17.9733 48.8444 16.9267 48.8444 15.66V7.5C48.8444 7.35333 48.891 7.23333 48.9844 7.14C49.0777 7.04667 49.1977 7 49.3444 7H51.5244C51.671 7 51.791 7.04667 51.8844 7.14C51.9777 7.23333 52.0244 7.35333 52.0244 7.5V15.64C52.0244 16.6267 52.2577 17.36 52.7244 17.84C53.191 18.32 53.8444 18.56 54.6844 18.56C55.511 18.56 56.1577 18.32 56.6244 17.84C57.091 17.36 57.3244 16.6267 57.3244 15.64V7.5C57.3244 7.35333 57.371 7.23333 57.4644 7.14C57.571 7.04667 57.691 7 57.8244 7H60.0244C60.1577 7 60.271 7.04667 60.3644 7.14C60.4577 7.23333 60.5044 7.35333 60.5044 7.5V15.66C60.5044 16.9267 60.2644 17.9733 59.7844 18.8C59.3044 19.6133 58.631 20.22 57.7644 20.62C56.8977 21.0067 55.871 21.2 54.6844 21.2ZM68.8994 21.2C67.646 21.2 66.5794 20.9933 65.6994 20.58C64.8327 20.1533 64.1594 19.54 63.6794 18.74C63.1994 17.9267 62.9327 16.94 62.8794 15.78C62.866 15.2333 62.8594 14.6467 62.8594 14.02C62.8594 13.3933 62.866 12.7933 62.8794 12.22C62.9327 11.0733 63.1994 10.1 63.6794 9.3C64.1727 8.48667 64.8594 7.86667 65.7394 7.44C66.6194 7.01333 67.6727 6.8 68.8994 6.8C69.7927 6.8 70.606 6.91333 71.3394 7.14C72.0727 7.36667 72.706 7.69333 73.2394 8.12C73.7727 8.54667 74.186 9.04667 74.4794 9.62C74.7727 10.1933 74.9327 10.8333 74.9594 11.54C74.9594 11.66 74.9127 11.76 74.8194 11.84C74.7394 11.92 74.6394 11.96 74.5194 11.96H72.2394C72.0794 11.96 71.9527 11.92 71.8594 11.84C71.766 11.76 71.6927 11.6267 71.6394 11.44C71.4394 10.6533 71.106 10.1133 70.6394 9.82C70.1727 9.52667 69.5927 9.38 68.8994 9.38C68.0727 9.38 67.4194 9.60667 66.9394 10.06C66.4594 10.5133 66.1994 11.2667 66.1594 12.32C66.1194 13.4133 66.1194 14.5333 66.1594 15.68C66.1994 16.7333 66.4594 17.4867 66.9394 17.94C67.4194 18.3933 68.0727 18.62 68.8994 18.62C69.5927 18.62 70.1727 18.4733 70.6394 18.18C71.1194 17.8733 71.4527 17.3333 71.6394 16.56C71.6927 16.36 71.766 16.2267 71.8594 16.16C71.9527 16.08 72.0794 16.04 72.2394 16.04H74.5194C74.6394 16.04 74.7394 16.08 74.8194 16.16C74.9127 16.24 74.9594 16.34 74.9594 16.46C74.9327 17.1667 74.7727 17.8067 74.4794 18.38C74.186 18.9533 73.7727 19.4533 73.2394 19.88C72.706 20.3067 72.0727 20.6333 71.3394 20.86C70.606 21.0867 69.7927 21.2 68.8994 21.2ZM77.7066 21C77.5599 21 77.4399 20.9533 77.3466 20.86C77.2532 20.7667 77.2066 20.6467 77.2066 20.5V7.5C77.2066 7.35333 77.2532 7.23333 77.3466 7.14C77.4399 7.04667 77.5599 7 77.7066 7H79.8266C79.9732 7 80.0932 7.04667 80.1866 7.14C80.2799 7.23333 80.3266 7.35333 80.3266 7.5V12.06L84.4466 7.38C84.4999 7.3 84.5866 7.22 84.7066 7.14C84.8399 7.04667 85.0132 7 85.2266 7H87.6466C87.7666 7 87.8666 7.04667 87.9466 7.14C88.0266 7.22 88.0666 7.31333 88.0666 7.42C88.0666 7.51333 88.0399 7.59333 87.9866 7.66L82.8466 13.7L88.3666 20.34C88.4199 20.3933 88.4466 20.4733 88.4466 20.58C88.4466 20.6867 88.4066 20.7867 88.3266 20.88C88.2466 20.96 88.1466 21 88.0266 21H85.5266C85.2866 21 85.1066 20.9467 84.9866 20.84C84.8666 20.7333 84.7866 20.66 84.7466 20.62L80.3266 15.5V20.5C80.3266 20.6467 80.2799 20.7667 80.1866 20.86C80.0932 20.9533 79.9732 21 79.8266 21H77.7066ZM90.6558 21C90.5224 21 90.4024 20.9533 90.2958 20.86C90.2024 20.7667 90.1558 20.6467 90.1558 20.5V7.5C90.1558 7.35333 90.2024 7.23333 90.2958 7.14C90.4024 7.04667 90.5224 7 90.6558 7H92.5158C92.7158 7 92.8624 7.05333 92.9558 7.16C93.0624 7.26667 93.1358 7.34667 93.1758 7.4L96.8558 14.18L100.576 7.4C100.602 7.34667 100.662 7.26667 100.756 7.16C100.862 7.05333 101.016 7 101.216 7H103.076C103.222 7 103.342 7.04667 103.436 7.14C103.529 7.23333 103.576 7.35333 103.576 7.5V20.5C103.576 20.6467 103.529 20.7667 103.436 20.86C103.342 20.9533 103.222 21 103.076 21H101.036C100.902 21 100.789 20.9533 100.696 20.86C100.602 20.7667 100.556 20.6467 100.556 20.5V12.42L98.0158 17.18C97.9491 17.3 97.8624 17.4067 97.7558 17.5C97.6491 17.5933 97.5091 17.64 97.3358 17.64H96.3958C96.2224 17.64 96.0824 17.5933 95.9758 17.5C95.8691 17.4067 95.7824 17.3 95.7158 17.18L93.1758 12.42V20.5C93.1758 20.6467 93.1291 20.7667 93.0358 20.86C92.9424 20.9533 92.8291 21 92.6958 21H90.6558ZM112.103 21.2C110.889 21.2 109.843 21 108.963 20.6C108.083 20.2 107.396 19.6 106.903 18.8C106.409 17.9867 106.143 16.9667 106.103 15.74C106.089 15.1667 106.083 14.6 106.083 14.04C106.083 13.4667 106.089 12.8867 106.103 12.3C106.143 11.1 106.409 10.0933 106.903 9.28C107.409 8.45333 108.103 7.83333 108.983 7.42C109.876 7.00667 110.916 6.8 112.103 6.8C113.276 6.8 114.303 7.00667 115.183 7.42C116.076 7.83333 116.776 8.45333 117.283 9.28C117.789 10.0933 118.056 11.1 118.083 12.3C118.109 12.8867 118.123 13.4667 118.123 14.04C118.123 14.6 118.109 15.1667 118.083 15.74C118.043 16.9667 117.776 17.9867 117.283 18.8C116.789 19.6 116.103 20.2 115.223 20.6C114.343 21 113.303 21.2 112.103 21.2ZM112.103 18.62C112.876 18.62 113.509 18.3867 114.003 17.92C114.509 17.44 114.776 16.68 114.803 15.64C114.829 15.0533 114.843 14.5067 114.843 14C114.843 13.48 114.829 12.9333 114.803 12.36C114.789 11.6667 114.663 11.1 114.423 10.66C114.183 10.22 113.863 9.9 113.463 9.7C113.076 9.48667 112.623 9.38 112.103 9.38C111.583 9.38 111.123 9.48667 110.723 9.7C110.323 9.9 110.003 10.22 109.763 10.66C109.536 11.1 109.409 11.6667 109.383 12.36C109.369 12.9333 109.363 13.48 109.363 14C109.363 14.5067 109.369 15.0533 109.383 15.64C109.423 16.68 109.689 17.44 110.183 17.92C110.676 18.3867 111.316 18.62 112.103 18.62ZM121.105 21C120.958 21 120.838 20.9533 120.745 20.86C120.652 20.7667 120.605 20.6467 120.605 20.5V7.5C120.605 7.35333 120.652 7.23333 120.745 7.14C120.838 7.04667 120.958 7 121.105 7H122.925C123.125 7 123.272 7.04667 123.365 7.14C123.458 7.23333 123.518 7.30667 123.545 7.36L128.885 15.7V7.5C128.885 7.35333 128.932 7.23333 129.025 7.14C129.118 7.04667 129.232 7 129.365 7H131.405C131.552 7 131.672 7.04667 131.765 7.14C131.858 7.23333 131.905 7.35333 131.905 7.5V20.5C131.905 20.6333 131.858 20.7533 131.765 20.86C131.672 20.9533 131.552 21 131.405 21H129.565C129.365 21 129.218 20.9533 129.125 20.86C129.045 20.7533 128.985 20.68 128.945 20.64L123.625 12.56V20.5C123.625 20.6467 123.578 20.7667 123.485 20.86C123.392 20.9533 123.272 21 123.125 21H121.105Z"
              fill="white"
            /> */}
            <path
              d="M12.7301 9.49096L12.7301 13.0283L12.7417 13.0291L12.7417 15.4949L12.7138 15.5059L12.7417 19.1086C12.7419 20.296 13.1127 21.4567 13.8072 22.4439C14.5018 23.4312 15.4888 24.2006 16.6437 24.6549C17.7985 25.1092 19.0692 25.2281 20.2952 24.9964C21.5211 24.7647 22.6472 24.1929 23.531 23.3533C24.4149 22.5136 25.0168 21.4439 25.2607 20.2793C25.5046 19.1147 25.3795 17.9076 24.9012 16.8106C24.423 15.7135 23.613 14.7758 22.5738 14.116C21.5346 13.4562 20.3127 13.104 19.0628 13.1038L17.7864 13.1038L17.7873 15.5059H19.0619C19.8119 15.5058 20.5452 15.717 21.1689 16.1128C21.7926 16.5086 22.2787 17.0712 22.5658 17.7295C22.8529 18.3877 22.9281 19.1121 22.7818 19.811C22.6354 20.5098 22.2743 21.1517 21.7439 21.6556C21.2135 22.1594 20.5378 22.5025 19.8021 22.6415C19.0665 22.7805 18.3039 22.7091 17.611 22.4364C16.9181 22.1636 16.3258 21.7018 15.9092 21.1093C15.4925 20.5169 15.2702 19.8203 15.2703 19.1078L15.2703 15.5891L15.2587 9.49181C15.2589 8.30426 14.8883 7.14333 14.1939 6.15584C13.4995 5.16835 12.5125 4.39867 11.3576 3.94413C10.2027 3.48959 8.93179 3.37061 7.70569 3.60225C6.4796 3.83389 5.35336 4.40573 4.4694 5.24545C3.58544 6.08518 2.98348 7.15507 2.73964 8.31981C2.4958 9.48455 2.62105 10.6918 3.09953 11.7889C3.57801 12.8861 4.38824 13.8238 5.42774 14.4834C6.46724 15.1431 7.68932 15.4951 8.93943 15.4949L10.214 15.4949L10.214 13.0937L8.93853 13.0928C8.18847 13.0929 7.45522 12.8817 6.83152 12.4859C6.20782 12.0901 5.72168 11.5275 5.43459 10.8692C5.1475 10.211 5.07236 9.48661 5.21866 8.78776C5.36496 8.08892 5.72614 7.44698 6.25652 6.94315C6.78689 6.43931 7.46264 6.09621 8.19829 5.95723C8.93395 5.81824 9.69647 5.88963 10.3894 6.16235C11.0824 6.43508 11.6746 6.89689 12.0912 7.48938C12.5079 8.08187 12.7302 8.77843 12.7301 9.49096Z"
              fill="#80C51B"
            />
            <path
              d="M8.93821 15.507L12.7131 15.507L15.2691 15.496L19.0625 15.496C20.3124 15.4958 21.5342 15.1436 22.5735 14.4838C23.6127 13.824 24.4226 12.8863 24.9009 11.7892C25.3792 10.6922 25.5043 9.48505 25.2604 8.32047C25.0165 7.15589 24.4145 6.08615 23.5307 5.24653C22.6468 4.40691 21.5208 3.8351 20.2948 3.60341C19.0689 3.37172 17.7982 3.49055 16.6434 3.94488C15.4885 4.39921 14.5014 5.16863 13.8069 6.15586C13.1124 7.14308 12.7416 8.30378 12.7414 9.49119L12.7414 13.1049H15.27L15.27 9.49204C15.2699 8.7795 15.4922 8.08295 15.9088 7.49045C16.3255 6.89796 16.9177 6.43615 17.6107 6.16343C18.3036 5.8907 19.0661 5.81932 19.8018 5.9583C20.5375 6.09728 21.2132 6.44039 21.7436 6.94422C22.274 7.44806 22.6351 8.08999 22.7814 8.78884C22.9277 9.48768 22.8526 10.212 22.5655 10.8703C22.2784 11.5286 21.7923 12.0912 21.1686 12.487C20.5449 12.8828 19.8116 13.094 19.0616 13.0939L15.3576 13.0939L15.3567 13.1049L8.9391 13.1049C7.689 13.1047 6.46692 13.4567 5.42742 14.1164C4.38791 14.776 3.57769 15.7137 3.09921 16.8108C2.62073 17.908 2.49548 19.1152 2.73932 20.28C2.98316 21.4447 3.58512 22.5146 4.46908 23.3543C5.35304 24.1941 6.47928 24.7659 7.70537 24.9975C8.93146 25.2292 10.2023 25.1102 11.3572 24.6557C12.5121 24.2011 13.4992 23.4314 14.1936 22.444C14.888 21.4565 15.2586 20.2955 15.2584 19.108L15.2691 15.496L12.7131 15.507L12.7298 19.1088C12.7299 19.8214 12.5076 20.5179 12.0909 21.1104C11.6743 21.7029 11.082 22.1647 10.3891 22.4374C9.69615 22.7102 8.93363 22.7816 8.19797 22.6426C7.46232 22.5036 6.78657 22.1605 6.2562 21.6566C5.72582 21.1528 5.36464 20.5109 5.21834 19.812C5.07204 19.1132 5.14718 18.3888 5.43427 17.7306C5.72136 17.0723 6.2075 16.5097 6.8312 16.1139C7.4549 15.7181 8.18815 15.5069 8.93821 15.507Z"
              fill="#AFEE3C"
            />
          </svg>
        </Styled.Logo>

        <Styled.HeaderButtonList>
          {HeaderMenuList.map((item) => {
            const isActive = item.path.replace('/', '') === currentPath;
            return (
              <li key={`header_${item.id}`}>
                <Styled.HeaderButton
                  isActive={isActive}
                  onClick={() => onClickHeaderMenu(item.path)}
                >
                  {item.name}
                </Styled.HeaderButton>
              </li>
            );
          })}
        </Styled.HeaderButtonList>

        <Styled.HamButton
          isOpen={isToggleHam}
          onClick={() => setIsToggleHam(!isToggleHam)}
        >
          <span></span>
          <span></span>
          <span></span>
        </Styled.HamButton>

        <Styled.SideBarWrapper isOpen={isToggleHam}>
          <Styled.SidebarButtonList>
            {HeaderMenuList.map((item) => {
              const isActive = item.path.replace('/', '') === currentPath;
              return (
                <li key={`sidebar_${item.id}`}>
                  <Styled.SidebarButton
                    isActive={isActive}
                    onClick={() => onClickHeaderMenu(item.path)}
                  >
                    {item.name}
                  </Styled.SidebarButton>
                </li>
              );
            })}
          </Styled.SidebarButtonList>
        </Styled.SideBarWrapper>
      </Styled.HeaderWrapper>
    </Styled.Container>
  );
};

export default Header;
